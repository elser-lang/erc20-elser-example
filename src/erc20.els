(ns ERC20 (:pragma "0.8.29"))

(constructor (do
	      (sto write! decimals 18)
	      (sto write! distributor (caller))))

(storage
 (:external
  (
   (def totalSupply (-> (:u256)))
   (def balanceOf (-> (map :addr :u256)))
   (def allowance (-> (map :addr (map :addr :u256))))
   (def decimals (-> (:u256)))
   
   (def distributor (-> (:addr)))
   )  
  ))

(storage
 (:external
  (
   (def totalSupply (-> (:u256)))
   (def balanceOf (-> (map :addr :u256)))
   (def allowance (-> (map :addr (map :addr :u256))))
   (def decimals (-> (:u256)))
   
   (def distributor (-> (:addr)))
   )  
  ))


(constants
 (:internal
  (
   (def ERR_BAD_BALANCE (-> (:u256)) 666)
   (def ERR_BAD_ALLOWANCE (-> (:u256)) 444)
   (def ERR_NOT_DISTRIBUTOR (-> (:u256)) 999)
   )
  ))

(events
 (
  (def Transfer ((from :addr) (to :addr) (value :u256)))
  (def Approval ((owner :addr) (spender :addr) (value :u256)))  
  ))

(functions
 (:external
  (

   (defn transfer ((to :addr) (val :u256)) (@sto :w 1 :r 1) (-> ((ok mut :bool)))
     (let (
	   callerBalance (sto read! balanceOf (caller))
	   toBalance (sto read! balanceOf to)
	   )
       (do
	(require (>= callerBalance val) ERR_BAD_BALANCE)
	
	(sto write! balanceOf (caller) (- callerBalance val))
	 (sto write! balanceOf to (+ toBalance val))

	 (emit! Transfer (caller) to val)
	 
	 (-> ok true)
	 )
       ))
   

   (defn approve ((spender :addr) (val :u256)) (@sto :w 1 :r 1) (-> ((ok mut :bool)))
     (do
      (sto write! allowance (caller) spender val)
      (emit! Approval (caller) spender val)
       (-> ok true)
       ))
   

   (defn transferFrom ((from :addr) (to :addr) (val :u256)) (@sto :w 2 :r 1) (-> ((ok mut :bool)))
     (let (
	   fromAllowance (sto read! allowance from (caller))
	   fromBalance (sto read! balanceOf from)
	   toBalance (sto read! balanceOf to)
	   )
       (do	
	(require (>= fromAllowance val) ERR_BAD_ALLOWANCE)
	(require (>= fromBalance val) ERR_BAD_BALANCE)

	 (sto write! allowance from (caller) (- fromAllowance val))
	 (sto write! balanceOf from (- fromBalance val))
	 (sto write! balanceOf to (+ toBalance val))

	 (emit! Transfer from to val)

	 (-> ok true)
	 )
       ))
   

   (defn mintDistributor ((amt :u256)) (@sto :w 2 :r 2) (-> ())
     (let (_distrib (sto read! distributor))

       (do
	(require (= (caller) _distrib) ERR_NOT_DISTRIBUTOR)
	
	(let (
	      distributorBalance (sto read! balanceOf _distrib)
	      supply (sto read! totalSupply)
	      )
	  
	  (sto write! balanceOf _distrib (+ distributorBalance amt))
	  (sto write! totalSupply (+ supply amt))
	  )
	 )))
   
   )
  ))
